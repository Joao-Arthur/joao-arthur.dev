{"pageProps":{"md":"# Conway's Game Of Life\n\n## Definition\n\n> The Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970\n\nThis automaton occurs on a grid where each cell can be either dead or alive. At each time step, the group of living cells is determined by the following rules:\n- Living cells survive with 2 or 3 living neighbors.\n- Dead cells become alive with 3 living neighbors.\n\n## Implementation\n\n### The array approach\n\nThe idea of this approach is to store the state of **every** cell.\n\n```ts\nconst grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]];\n```\n\nIn the case of a square grid, the **number** of items in the array will be equal to the **square** of the grid's **length**:\n- 10x10 grid = 100 items\n- 100x100 grid = 10.000 items\n- 300x300 grid = 90.000 items\n\nThis implies that memory usage grows faster than the grid width.\n\n#### The visual problem\n\nIf all cells are confined **only within** the grid boundaries, they become **stuck** at the edges. For instance, a glider on the edge **becomes a block**.\n\n![glider transforms into block](/images/glider_to_block.gif)\n\n#### The performance problem\n\nCreating a new generation requires creating a new array of the same size as the current one.\n\nYou can choose between:\n- Iterating over all items in the current array.\n    - **Advantage**: Simplicity.\n    - **Disadvantage**: Slower performance with larger grids.\n- Mapping the positions of alive cells and iterating over their neighbors.\n    - **Advantage**: Improved performance with fewer alive cells.\n    - **Disadvantage**: More complex to implement.\n\n### The Map approach\n\nThe idea of this approach is to store only the state of **living** cells.\n\n```ts\nconst grid = new Map([\n    ['(0, 1)', 1],\n    ['(-4, 2)', 1],\n    ['(7, -3)', 1]]\n);\n```\n\n> Using a \"Set\" would also suffice **in this scenario**, since a living cell has only one state\n\nAn important change is that, with a Map, we can no longer rely on array indices. Instead, we need to use a different method to identify cell positions, i.e., a **coordinate system**. I chose the **cartesian plane**.\n\n#### The visual solution\n\nGiven that the coordinate system is **infinite**, the UI works like a **magnifying glass**: revealing only a small part of the landscape, with the ability to move around and zoom in and out. The limitation at the edges no longer exists:\n\n![glider slipping away](/images/glider_away.gif)\n\n#### The performance solution\n\nTo create a new generation, a new Map must be created by iterating over the living cells and their neighborhoods. This operation is independent of the UI size and therefore, **much faster**.\n\n## Final application\n"},"__N_SSG":true}