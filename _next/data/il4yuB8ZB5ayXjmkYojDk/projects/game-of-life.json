{"pageProps":{"md":"# Conway's Game Of Life\n\n## Definition\n\n> The Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\n\nThe automaton happens in a grid which each cell can be dead or alive. At each step in time, the group of alive cells is determined by the following rules:\n- Alive cells survive with 2 or 3 alive neighbors.\n- Dead cells become alive with 3 alive neighbors.\n\n## Implementing\n\n### The array approach\n\nThe idea of this approach is to store the state of **every** cell.\n\n```ts\nconst grid = [[0, 1, 0], [1, 1, 1], [0, 1, 0]];\n```\n\nSupposing a square grid, the **number** of items in the array will be the **square** of the grid **length**:\n- 10x10 grid = 100 items\n- 100x100 grid = 10.000 items\n- 300x300 grid = 90.000 items\n\nThat means that the the memory usage grows faster than the grid width.\n\n#### The visual problem\n\nIf all the cells live **only inside** the grid box, they **stuck** at edges. For instance, a glider on the edge **becomes a block**.\n\n![glider transforms into block](/images/glider_to_block.gif)\n\n#### The performance problem\n\nTo create a new generation you need to create a new array with the same size of the current one.\n\nYou can either:\n- iterate over all items of the current array.\n    - **advantage**: easy to do.\n    - **disadvantage**: the bigger the grid, the slowest it will be.\n- map where are the alive cells and them iterate over its neighbors.\n    - **advatange**: only increases performance when there are few alive cells.\n    - **disadvantage**: more complex to implement.\n\n### The Map approach\n\nThe idea of this approach is to store **only the alive** cells.\n\n```ts\nconst grid = new Map([\n    ['(0, 1)', 1],\n    ['(-4, 2)', 1],\n    ['(7, -3)', 1]]\n);\n```\n\n> using a \"Set\" would also cut the mustard **in this scenario**, since a alive cell have only one state.\n\nOne important aspect is that, with a Map, we can no longer count on an array index, we must use another way to identify the cell position, i.e., a **coordinate system**, like the **cartesian plane**.\n\n#### The visual solution\n\nGiven that the coordinate system is **infinite**, the UI is works like a **spyglass**: showing only a small portion of the landscape, with the hability of moving around and zooming in and out.\nThere's no longer a limitation on the edges:\n\n![glider slipping away](/images/glider_away.gif)\n\n#### The performance solution\n\nTo create a new generation you need to create a new Map, iterating over the alive cells and their neighbordhoods, which is a operation independent from the UI size, therefore **much faster**.\n\n## Final application\n"},"__N_SSG":true}