2:I[9986,[],""]
3:I[3582,[],""]
4:I[3083,["547","static/chunks/547-f445e9e3aa6a67fa.js","185","static/chunks/app/layout-6950cd60a95db250.js"],"Header"]
0:["ssjDHq-oyKfLCYhfof5Rx",[[["",{"children":["project",{"children":["post",{"children":["game-of-life",{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["project",{"children":["post",{"children":["game-of-life",{"children":["__PAGE__",{},[["$L1",[["$","h1",null,{"children":"Conway's Game Of Life"}],"\n",["$","h2",null,{"children":"Definition"}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"The Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970"}],"\n"]}],"\n",["$","p",null,{"children":"This automaton occurs on a grid where each cell can be either dead or alive. At each time step, the group of living cells is determined by the following rules:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"Living cells survive with 2 or 3 living neighbors."}],"\n",["$","li",null,{"children":"Dead cells become alive with 3 living neighbors."}],"\n"]}],"\n",["$","h2",null,{"children":"Implementation"}],"\n",["$","h3",null,{"children":"The array approach"}],"\n",["$","p",null,{"children":["The idea of this approach is to store the state of ",["$","strong",null,{"children":"every"}]," cell."]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"const grid = [\n    [0, 1, 0],\n    [1, 1, 1],\n    [0, 1, 0]\n];\n"}]}],"\n",["$","p",null,{"children":["In the case of a square grid, the ",["$","strong",null,{"children":"number"}]," of items in the array will be equal to the ",["$","strong",null,{"children":"square"}]," of the grid's ",["$","strong",null,{"children":"length"}],":"]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"10x10 grid = 100 items"}],"\n",["$","li",null,{"children":"100x100 grid = 10.000 items"}],"\n",["$","li",null,{"children":"300x300 grid = 90.000 items"}],"\n"]}],"\n",["$","p",null,{"children":"This implies that memory usage grows faster than the grid width."}],"\n",["$","h4",null,{"children":"The visual problem"}],"\n",["$","p",null,{"children":["If all cells are confined ",["$","strong",null,{"children":"only within"}]," the grid boundaries, they become ",["$","strong",null,{"children":"stuck"}]," at the edges. For instance, a glider on the edge ",["$","strong",null,{"children":"becomes a block"}],"."]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/glider_to_block.gif","alt":"glider transforms into block"}]}],"\n",["$","h4",null,{"children":"The performance problem"}],"\n",["$","p",null,{"children":"Creating a new generation requires creating a new array of the same size as the current one."}],"\n",["$","p",null,{"children":"You can choose between:"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["Iterating over all items in the current array.","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Advantage"}],": Simplicity."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Disadvantage"}],": Slower performance with larger grids."]}],"\n"]}],"\n"]}],"\n",["$","li",null,{"children":["Mapping the positions of alive cells and iterating over their neighbors.","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":[["$","strong",null,{"children":"Advantage"}],": Improved performance with fewer alive cells."]}],"\n",["$","li",null,{"children":[["$","strong",null,{"children":"Disadvantage"}],": More complex to implement."]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","h3",null,{"children":"The Map approach"}],"\n",["$","p",null,{"children":["The idea of this approach is to store only the state of ",["$","strong",null,{"children":"living"}]," cells."]}],"\n",["$","pre",null,{"children":["$","code",null,{"className":"language-ts","children":"const grid = new Map([\n    ['(0, 1)', 1],\n    ['(-4, 2)', 1],\n    ['(7, -3)', 1]\n]);\n"}]}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":["Using a \"Set\" would also suffice ",["$","strong",null,{"children":"in this scenario"}],", since a living cell has only one state"]}],"\n"]}],"\n",["$","p",null,{"children":["An important change is that, with a Map, we can no longer rely on array indices. Instead, we need to use a different method to identify cell positions, i.e., a ",["$","strong",null,{"children":"coordinate system"}],". I chose the ",["$","strong",null,{"children":"cartesian plane"}],"."]}],"\n",["$","h4",null,{"children":"The visual solution"}],"\n",["$","p",null,{"children":["Given that the coordinate system is ",["$","strong",null,{"children":"infinite"}],", the UI works like a ",["$","strong",null,{"children":"magnifying glass"}],": revealing only a small part of the landscape, with the ability to move around and zoom in and out. The limitation at the edges no longer exists:"]}],"\n",["$","p",null,{"children":["$","img",null,{"src":"/images/glider_away.gif","alt":"glider slipping away"}]}],"\n",["$","h4",null,{"children":"The performance solution"}],"\n",["$","p",null,{"children":["To create a new generation, a new Map must be created by iterating over the living cells and their neighborhoods. This operation is independent of the UI size and therefore, ",["$","strong",null,{"children":"much faster"}],"."]}],"\n",["$","h2",null,{"children":"Final application"}],"\n",["$","p",null,{"children":["$","a",null,{"href":"/game-of-life/index.html","children":"Click here to see!"}]}]]],null],null]},[["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","project","children","post","children","game-of-life","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null],null]},[["$","div",null,{"className":"prose prose-img:w-32 prose-img:h-w-32 prose-img:rendering-pixelated m-auto pb-24","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","project","children","post","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]}],null],null]},["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children","project","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}],null]},[["$","html",null,{"lang":"en","className":"__className_a42e44 w-svw h-svh overflow-hidden","children":["$","body",null,{"className":"w-full h-full overflow-hidden","children":[["$","$L4",null,{}],["$","main",null,{"className":"h-full overflow-auto px-5","children":["$","$L2",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/d29a8c885de397cf.css","precedence":"next","crossOrigin":"$undefined"}]],"$L5"]]]]
5:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"2023-08-12 | Jo√£o Arthur"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"75x75"}],["$","meta","4",{"name":"next-size-adjust"}]]
1:null
